---
layout: post
title:  "Interpola√ß√£o com RBF"
date:	2018-11-05 21:34:00 -0300
subtitle: "Entendendo uma Radial Basis Function"
comments: true
categories: Machine-learning data-science
---

<!-- # Introdu√ß√£o

O forte interesse em aprendizagem de maquina √© parcialmente inpulsionado pela expectativa de que eles v√£o prover uma nova fonte de algor√≠timos/arquiteturas para processar dados complexos. Essas expectativas se baseiam na capacidade do c√©rebro de animais os quais consegume lidar com sofisticados reconhecimentos de padr√µes e tarefas muito al√©m das realizadas pelos sistemas e arquiteturas atuais.

Um exemplo de uma tarefa di√°ria que ilustra esse ponto √© o reconhecimento de voz (speech) humana. Para um reconhecimento autom√°tico da voz um desejo √© que se consiga extrair as propriedades dos dados de entrada mesmo ele estando sujeito a distor√ß√µes n√£o lineares como ru√≠do, genero, idade, sa√∫de e sot√°que do interlocutor, o que introduz uma grande dificuldade.

Na tentativa de contornar esse problema, modelos de aprendizagem de maquina forma empregados. Tendo a virtude de n√£o precisar de um modelo explicito para o reconhecimento de voz a `Multilayer perceptron` incorpora uma s√©rie de camadas "escondidas" cuja tarefa √© codificar as restri√ß√µes dos dados de entrada. Isso √© alcan√ßado variando o valor dos pesos com o objetivo de minimizar o erro em rela√ß√£o a entrada/sa√≠da dos dados de treinamento. Este processo ficou conhecido como `aprendizagem`. E a habilidade da rede produzir resultados razo√°veis para dados n√£o utilizados no treinamento √© conhecido como `generaliza√ß√£o`. Por√©m utilizar uma multilayer perceptron para resolver uma tarefa espec√≠fica exige um esfor√ßo muito emp√≠rico pois ainda nos restam algumas quest√µes como: Quantas camadas escondidas devem ser utilizadas? e em que organiza√ß√£o elas devem estar? Quantos dados de treinamento s√£o necess√°rios? Qual deve ser o valor inicial dos pesos?

Com o intuito de responder as quest√µes acima surgiram novos modelos, os quais tentam deixar a modelagem mais explicita e menos emp√≠rica. Uma dessa t√©cnicas √© a interpola√ß√£o em espa√ßos multidimensionais atrav√©s do `Radial Basis Funcions`. -->






<!-- ## problema

Dado um conjunto de pontos `X` escolha uma fun√ß√£o que satisfa√ßa a condi√ß√£o de interpola√ß√£o:


![{{ site.baseurl }}/assets/img/interpolate1.svg]({{ site.baseurl }}/assets/img/interpolate1.svg)




$$
f( x) =\sum ^{P}_{p=1} \lambda _{p} \phi ( \parallel x-y_{p} \parallel )
$$

Onde $$\phi$$ √© uma fun√ß√£o gaussiana -->

## Exemplos de RBF


$$

\begin{equation*}
\begin{matrix}
f( x) =\sqrt{1+\sigma ^{2} +x^{2}} &  & f( x) =e^{-\frac{1}{2\sigma ^{2}} \ x^{2}}\\
 &  & \\
f( x) =x^{\sigma ^{2}}\ln x &  & f( x) =\frac{1}{1+\sigma ^{2} x^{2}}
\end{matrix}
\end{equation*}

$$

## Comportamento da fun√ß√£o

### RBF com varia√ß√£o no $$\sigma$$, $$\lambda$$ e em $$c$$

$$
f( x) =\lambda e^{-\frac{1}{2\sigma ^{2}} \ (x)^{2}}
$$


<div id="graph-gaussian1"></div>

<script>
    var sigma = 15;
    var signal = '+'
    var center = 4
    var lambda = 1
    showVal(sigma, signal, center, lambda)

    function updateSigma(v, s, c, l) {
        
        sigma = v
        signal = s
        center = c
        lambda = l
        showVal(sigma, signal, center, lambda)
        
    }

    function showVal(sigma, signal, center, lambda) {
        
        const layout = { title:'' }
        const sigmaSquare = Math.pow(sigma * 0.1, 2);
        center = center*0.1
        const expressions = `${signal}${lambda}*e^(-(1/(2*(${sigmaSquare})))*(x-${center})^2)`
        const expr = math.compile(expressions)
        const xValues = math.range(-11, 11, 0.05).toArray()
        const yValues = xValues.map(x => expr.eval({ x: x }))
        const trace = { x: xValues, y: yValues, type: 'scatter' }
        Plotly.newPlot('graph-gaussian1', [trace], layout, {displayModeBar: false});
    }
</script>

<center>
    <label> ùúé
    <input type="range" min="1" max="30" value="15" style="width:50%;" oninput="updateSigma(this.value, signal, center, lambda)">
    </label>
    <p>0.1 - 3</p>

    <label> $$\lambda$$
    <input type="range" min="-10" max="10" value="1" style="width:50%;" oninput="updateSigma(sigma, signal, center, this.value)">
    </label>
    <p>-10 - 10</p>

    <label> C
    <input type="range" min="-50" max="50" value="0" style="width:50%;" oninput="updateSigma(sigma, signal, this.value, lambda)">
    </label>
    <p>-5 - 5</p>
    
    <!-- <p>
      <label>
        <input name="group1" type="radio" checked value="+" onClick="updateSigma(sigma, this.value, center, lambda);"/>
        <span style="display: inline-block;">$$+e$$</span>
      </label>
    
      <label>
        <input name="group1" type="radio" value="-" onClick="updateSigma(sigma, this.value, center, lambda);"/>
        <span style="display: inline-block;">$$-e$$</span>
      </label>
    </p> -->
</center>

Somat√≥rios de RBF`s s√£o utilizado para criar interpola√ß√£o. Este processo de interpola√ß√£o √© muito similar ao de uma rede neural e em algumas literaturas pode-se encontrar RBF`s Neural networks.

RBF
$$
f( x) =\sum ^{P}_{p=1} \lambda _{p} \phi ( \parallel x-y_{p} \parallel )
$$

Perceptron
$$
f( x) =\sum ^{P}_{p=1} w_{p} x_{p} +b
$$


### Somat√≥rio de RBF`s com varia√ß√£o no `sigma` e no sinal da fun√ß√£o

$$
f( x) =e^{-\frac{1}{2\sigma ^{2}}( x-1)^{2}} +e^{-\frac{1}{2\sigma ^{2}}( x+1)^{2}}
$$


<div id="graph-gaussian2"></div>

<script>
    var sigma1 = 15;
    var sigma2 = 15;

    var signal1 = '+'
    var signal2 = '-'

    showValExample2(sigma1, sigma2, signal1, signal2)

    function updateEx2(sgm1, sgm2, snl1, snl2) {
        sigma1 = sgm1;
        sigma2 = sgm2;

        signal1 = snl1
        signal2 = snl2
        showValExample2(sigma1, sigma2, signal1, signal2)
    }

    function showValExample2(sigma1, sigma2, signal1, signal2) {
        const centers = 2
        const semiCenter = centers/2

        const layout = { title:'Soma de duas fun√ß√µes gaussianas' }
        const sigmaSquare1 = Math.pow(sigma1 * 0.1, 2);
        const sigmaSquare2 = Math.pow(sigma2 * 0.1, 2);

        let expressions = ``
        for(let i=0; i < centers; i++) {
            let center2 = centers/2;
            let c = 0
            expressions += `${signal1} e^(-(1/(2*(${sigmaSquare1})))*(x+2)^2) + ${signal2} e^(-(1/(2*(${sigmaSquare2})))*(x-2)^2)`
        }

        const expr = math.compile(expressions)
        const xValues = math.range(-11, 11, 0.05).toArray()
        const yValues = xValues.map(x => expr.eval({ x: x }))
        const trace = { x: xValues, y: yValues, type: 'scatter' }
        Plotly.newPlot('graph-gaussian2', [trace], layout, {displayModeBar: false});
    }
</script>

<div style="display: inline-flex; width: 100%;">
    <center style="width: 50%;">
        <label> ùúé
        <input type="range" min="1" max="30" value="15" style="width:25%;" oninput="updateEx2(this.value, sigma2, signal1, signal2)">
        </label>
        <p>0.1 - 3</p>
        <label>
            <input name="ex2g1" type="radio" checked value="+" onClick="updateEx2(sigma1, sigma2, this.value, signal2);"/>
            <span style="display: inline-block;">$$+e$$</span>
        </label>
        <label>
            <input name="ex2g1" type="radio" value="-" onClick="updateEx2(sigma1, sigma2, this.value, signal2);"/>
            <span style="display: inline-block;">$$-e$$</span>
        </label>
    </center>
    <center style="width: 50%;">
        <label> ùúé
        <input type="range" min="1" max="30" value="15" style="width:25%;" oninput="updateEx2(sigma1, this.value, signal1, signal2)">
        </label>
        <p>0.1 - 3</p>
        <label>
            <input name="ex2g2" type="radio" value="+" onClick="updateEx2(sigma1, sigma2, signal1, this.value);"/>
            <span style="display: inline-block;">$$+e$$</span>
        </label>
        <label>
            <input name="ex2g2" type="radio" checked value="-" onClick="updateEx2(sigma1, sigma2, signal1, this.value);"/>
            <span style="display: inline-block;">$$-e$$</span>
        </label>
    </center>
</div>

### Somat√≥rio de multiplos RBF`s com multiplos sinais

$$
f(x)=-e^{-\left(\frac{1}{0.8^{2}}( x-1)^{2}\right)} +1e^{-\left(\frac{1}{0.8^{2}}( x-0)^{2}\right)} -e^{-\left(\frac{1}{0.8^{2}}( x+1)^{2}\right)}
$$

![{{ site.baseurl }}/assets/img/rbf3g.svg]({{ site.baseurl }}/assets/img/rbf3g.svg)

### Somat√≥rio de RBF`s reproduzindo uma fun√ß√£o linear

$$
f(x)=+1e^{-\left(\frac{1}{0.9^{2}}( x-1.2)^{2}\right)} -1e^{-\left(\frac{1}{0.9^{2}}( x+1.2)^{2}\right)}
$$

![{{ site.baseurl }}/assets/img/rbf-linear.svg]({{ site.baseurl }}/assets/img/rbf-linear.svg)


### Somat√≥rio de RBF`s reproduzindo a fun√ß√£o cosseno

$$
f( x) =e^{-\left(\frac{1}{\sqrt{2}^{2}}( x+2\pi )^{2}\right)} -e^{-\left(\frac{1}{\sqrt{2}^{2}}( x+\pi )^{2}\right)} +e^{-\left(\frac{1}{\sqrt{2}^{2}}( x+0)^{2}\right)} -e^{-\left(\frac{1}{\sqrt{2}^{2}}( x-\pi )^{2}\right)} +e^{-\left(\frac{1}{\sqrt{2}^{2}}( x-2\pi )^{2}\right)}
$$

![{{ site.baseurl }}/assets/img/rbf-cos.svg]({{ site.baseurl }}/assets/img/rbf-cos.svg)

### Somat√≥rio de RBF`s reproduzindo uma fun√ß√£o n√£o linear

$$
f( x) =-e^{-\left(\frac{1}{2.3^{2}}( x-2)^{2}\right)} +e^{-\left(\frac{1}{1.2^{2}}( x-0)^{2}\right)} -e^{-\left(\frac{1}{0.5^{2}}( x+0.2)^{2}\right)} +e^{-\left(\frac{1}{0.33^{2}}( x+3)^{2}\right)} +e^{-\left(\frac{1}{0.3^{2}}( x-3)^{2}\right)}
$$

![{{ site.baseurl }}/assets/img/rbf-complex.svg]({{ site.baseurl }}/assets/img/rbf-complex.svg)


# Interpola√ß√£o

Acima forma mostrados alguns exemplos de como a RBF funcionam e como a combina√ß√£o delas pode criar um aproximador de praticamente qualquer fun√ß√£o. Por√©m ainda precisamos de uma forma de encontrar os parametros necess√°rios da RBF, e para isso podemos montar um sistema. Segue o exemplo:

Supondo que temos a seguinte entrada e sa√≠da:

$$
\begin{array}{ c c }
x & f( x)\\
2 & 3\\
3 & 6\\
4 & 5
\end{array}
$$


# TODO Grafico com os pontos da fun√ß√£o

E que para resolver essa regress√£o vamos utilizar 2 centros:

$$
\begin{array}{l}
C1=2\\
C2=4
\end{array}
$$

Um sigma constante:

$$
\sigma ^{2} =1
$$

E a RBF:

$$
R_{p} = e^{-\frac{1}{2\sigma ^{2}} .\parallel ( X_{i}) -( X_{p}) \parallel ^{2}}
$$

Sabendo que determinada entrada deve retornar a uma sa√≠da espec√≠fica podemos construir um sistema utilizando a fun√ß√£o

$$
\begin{cases}
e^{-0.5\parallel ( x_{1}) -( c_{1}) \parallel ^{2}} a_{1} +e^{-0.5\parallel ( x_{1}) -( c_{2}) \parallel ^{2}} a_{2} +b=output_{1}\\
e^{-0.5\parallel ( x_{2}) -( c_{1}) \parallel ^{2}} a_{1} +e^{-0.5\parallel ( x_{2}) -( c_{2}) \parallel ^{2}} a_{2} +b=output_{2}\\
e^{-0.5\parallel ( x_{3}) -( c_{1}) \parallel ^{2}} a_{1} +e^{-0.5\parallel ( x_{3}) -( c_{2}) \parallel ^{2}} a_{2} +b=output_{3}
\end{cases}
$$


$$
\begin{cases}
e^{-0.5\parallel ( 2) -( 2) \parallel ^{2}} a_{1} +e^{-0.5\parallel ( 2) -( 4) \parallel ^{2}} a_{2} +b=3\\
e^{-0.5\parallel ( 3) -( 2) \parallel ^{2}} a_{1} +e^{-0.5\parallel ( 3) -( 4) \parallel ^{2}} a_{2} +b=6\\
e^{-0.5\parallel ( 4) -( 2) \parallel ^{2}} a_{1} +e^{-0.5\parallel ( 4) -( 4) \parallel ^{2}} a_{2} +b=5
\end{cases}\\
\\
\begin{cases}
e^{-0.0} a_{1} +e^{-2.0} a_{2} +b=3\\
e^{-0.5} a_{1} +e^{-0.5} a_{2} +b=6\\
e^{-2.0} a_{1} +e^{-0.0} a_{2} +b=5
\end{cases}\\
\\
\begin{cases}
1.0000a_{1} +0.1353 a_{2} +b1.0000=3\\
0.6065a_{1} +0.6065 a_{2} +b1.0000=3\\
0.1353a_{1} +1.0000 a_{2} +b1.0000=3
\end{cases}
$$

Atrav√©s da resolu√ß√£o de sistemas pelo m√©todo da matriz inversa/pseudo inversa podemos reolver o sistema e encontrar os parametros que nos restam: 

$$
 \begin{array}{l}
\begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.6065 & 0.6065 & 1.0000\\
0.1353 & 1.0000 & 1.0000
\end{bmatrix} .\begin{bmatrix}
a1\\
a2\\
a3
\end{bmatrix} =\begin{bmatrix}
3\\
6\\
5
\end{bmatrix}\\
\\
\begin{bmatrix}
R
\end{bmatrix}_{3x3} .\begin{bmatrix}
a
\end{bmatrix}_{3x1} =\begin{bmatrix}
A
\end{bmatrix}_{3x1}\\
\\
\begin{bmatrix}
R
\end{bmatrix} =\begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.6065 & 0.6065 & 1.0000\\
0.1353 & 1.0000 & 1.0000
\end{bmatrix}_{3x3}\\
\\
\frac{1}{[ R]} =\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t}\\
\\
[ R]^{t} .[ R] =\begin{bmatrix}
1.0000 & 0.6065 & 0.1353\\
0.1353 & 0.6065 & 1.0000\\
1.0000 & 1.0000 & 1.0000
\end{bmatrix}_{3x3} .\ \begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.6065 & 0.6065 & 1.0000\\
0.1353 & 1.0000 & 1.0000
\end{bmatrix}_{3x3}\\
\\
[ R]^{t} .[ R] =\begin{bmatrix}
1.3862 & 0.6386 & 1.7419\\
0.6386 & 1.3262 & 1.7419\\
1.7419 & 1.7419 & 3.0000
\end{bmatrix}_{3x3}\\
\\
\left([ R]^{t} .[ R]\right)^{-1} =\begin{bmatrix}
248.9582 & 247.6207 & -288.3246\\
247.6207 & 248.9582 & -288.3246\\
-288.3246 & -288.3246 & 335.1485
\end{bmatrix}_{3x3}\\
\\
\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t} \ =\begin{bmatrix}
248.9582 & 247.6207 & -288.3246\\
247.6207 & 248.9582 & -288.3246\\
-288.3246 & -288.3246 & 335.1485
\end{bmatrix}_{3x3} .\ \begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.6065 & 0.6065 & 1.0000\\
0.1353 & 1.0000 & 1.0000
\end{bmatrix}_{3x3}\\
\\
\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t} \ =\begin{bmatrix}
-5.8546 & 12.8657 & -7.0111\\
-7.0111 & 12.8657 & -5.8546\\
7.8034 & -146069 & 7.8034
\end{bmatrix}_{3x3} =\frac{1}{[ R]}\\
\\
\begin{bmatrix}
a
\end{bmatrix} =\frac{1}{[ R]} \ \begin{bmatrix}
A
\end{bmatrix}\\
\\
\end{array}
$$

$$
\begin{bmatrix}
+24.5749\\
+26.8879\\
-25.2138
\end{bmatrix}_{3x1} =\begin{bmatrix}
-5.8546 & 12.8657 & -7.0111\\
-7.0111 & 12.8657 & -5.8546\\
7.8034 & -146069 & 7.8034
\end{bmatrix}_{3x3} .\begin{bmatrix}
3\\
6\\
5
\end{bmatrix}_{3x1}\\
\\
f( x) =\sum ^{2}_{p=1} \lambda e^{-\frac{1}{2\sigma ^{2}} \ (x)^{2}}\\
\\
$$
Substituimos os $$\lambda$$ pelos valores encontrados e podemos testar nossa fun√ß√£o de interpola√ß√£o:
$$
\\
f\ ( x) \ =a_{1} e^{-0.5\parallel ( X) -( 2) \parallel ^{2}} +a_{2} e^{-0.5\parallel ( X) -( 4) \parallel ^{2}} +b\\
\\
f\ ( x) \ =24.5749e^{-0.5\parallel ( X) -( 2) \parallel ^{2}} +26.8879e^{-0.5\parallel ( X) -( 4) \parallel ^{2}} -25.2138\\
\\
X=( 2) \Longrightarrow 24.5749e^{0.0} +26.8879e^{-2.0} -25.2138\ =3\\
\\
X=( 3) \Longrightarrow 24.5749e^{-0.5} +26.8879e^{-0.5} -25.2138\ =6\\
\\
X=( 4) \Longrightarrow 24.5749e^{-2.0} +26.8879e^{0.0} -25.2138\ =5\\
\\
f( 1.5) =-2.3451\\
\\
f( 2.5) =+5.2027\\
\\
f( 3.5) =+6.4930\\
\\
f( 4.5) =-0.4055\\
$$


<!-- 
## Aproxima√ß√£o

$$
f( x) =\sum ^{P}_{p=1} a_{p} .R_{p} +b
$$



Resolua√ß√£o de sistemas pelo metodo da matriz inversa

$$
    fx=\begin{cases}
        2a1+1a2=4\\
        1a1+1a2=3
    \end{cases}
$$

Reescrevendo em forma de matriz:

$$
\begin{bmatrix}
    2 & 1\\
    1 & 1
\end{bmatrix} \ .
\begin{bmatrix}
    a1\\
    a2
\end{bmatrix} =
\begin{bmatrix}
    4\\
    3
\end{bmatrix}
$$
 
 Podemos utilizar a equa√ß√£o:

$$
\begin{bmatrix}
    R
\end{bmatrix} .
\begin{bmatrix}
    a
\end{bmatrix} =
\begin{bmatrix}
    A
\end{bmatrix}
$$

Isolando a matriz *a*

$$
\begin{bmatrix}
    a
\end{bmatrix} =
\begin{bmatrix}
    R
\end{bmatrix}^{-1}\ .
\begin{bmatrix}
    A
\end{bmatrix}
$$

Obtemos

$$
\begin{bmatrix}
    a1\\
    a2
\end{bmatrix} =
\begin{bmatrix}
    1 & -1\\
    -1 & 2
\end{bmatrix}.
\begin{bmatrix}
    4\\
    3
\end{bmatrix}
$$

Que resulta em

$$
\begin{bmatrix}
    a1\\
    a2
\end{bmatrix} =
\begin{bmatrix}
    1\\
    2
\end{bmatrix}
$$

Por√©m so conseguimos encontrar a matriz inversa √† partir de uma matriz quadrada.
Uma forma de resolver o sistema  n√£o quadrado e utilizando a [matriz pseudo-inversa](https://en.wikipedia.org/wiki/Moore%E2%80%93Penrose_inverse)
descoberta por [Moore](https://en.wikipedia.org/wiki/E._H._Moore)

Que deduz:


$$
\begin{bmatrix}
R
\end{bmatrix} .\begin{bmatrix}
a
\end{bmatrix} =\begin{bmatrix}
A
\end{bmatrix}
$$

$$
\begin{bmatrix}
I
\end{bmatrix} .\begin{bmatrix}
R
\end{bmatrix} .\begin{bmatrix}
a
\end{bmatrix} =\begin{bmatrix}
I
\end{bmatrix} .\begin{bmatrix}
A
\end{bmatrix}
$$

$$
\begin{bmatrix}
R
\end{bmatrix} .\begin{bmatrix}
a
\end{bmatrix} =\begin{bmatrix}
R^{t}
\end{bmatrix}^{-1} .\begin{bmatrix}
R^{t}
\end{bmatrix} .\begin{bmatrix}
A
\end{bmatrix}
$$

$$
\begin{bmatrix}
R
\end{bmatrix}^{-1} .\begin{bmatrix}
R
\end{bmatrix} .\begin{bmatrix}
a
\end{bmatrix} =\begin{bmatrix}
R
\end{bmatrix}^{-1} .\begin{bmatrix}
R^{t}
\end{bmatrix}^{-1} .\begin{bmatrix}
R^{t}
\end{bmatrix} .\begin{bmatrix}
A
\end{bmatrix}
$$

$$
\begin{bmatrix}
a
\end{bmatrix} =\begin{bmatrix}
R
\end{bmatrix}^{-1} .\begin{bmatrix}
R^{t}
\end{bmatrix}^{-1} .\begin{bmatrix}
R^{t}
\end{bmatrix} .\begin{bmatrix}
A
\end{bmatrix}
$$

$$
\left(\begin{bmatrix}
B
\end{bmatrix} .\begin{bmatrix}
A
\end{bmatrix}\right)^{-1} =\begin{bmatrix}
B
\end{bmatrix}^{-1} .\begin{bmatrix}
A
\end{bmatrix}^{-1}
$$

$$
\left(\begin{bmatrix}
R^{t}
\end{bmatrix} .\begin{bmatrix}
R
\end{bmatrix}\right)^{-1} =\begin{bmatrix}
R
\end{bmatrix}^{-1} .\begin{bmatrix}
R^{t}
\end{bmatrix}^{-1}
$$


$$
\begin{bmatrix}
a
\end{bmatrix} =\left(\begin{bmatrix}
R^{t}
\end{bmatrix} .\begin{bmatrix}
R
\end{bmatrix}\right)^{-1} .\begin{bmatrix}
R^{t}
\end{bmatrix} .\begin{bmatrix}
A
\end{bmatrix}
$$

$$
\begin{bmatrix}
a
\end{bmatrix} =\frac{1}{[ R]} \ \begin{bmatrix}
A
\end{bmatrix}
$$

$$
\frac{1}{[ R]} \ =\left(\begin{bmatrix}
R^{t}
\end{bmatrix} .\begin{bmatrix}
R
\end{bmatrix}\right)^{-1} .\begin{bmatrix}
R^{t}
\end{bmatrix}
$$

***

$$
\begin{cases}
1a1\ +\ 2a2\ +\ 1a3\ =4\\
2a1\ +\ 3a2\ +\ 1a3\ =6\\
4a1\ +\ 1a2\ +\ 2a2\ =7\\
1a1\ +\ 5a2\ +\ 2a3\ =8
\end{cases}
$$


$$
\begin{bmatrix}
    a
\end{bmatrix} =
\frac{1}{[ R]} \ 
\begin{bmatrix}
    A
\end{bmatrix}
$$  

onde 

$$\frac{1}{[ R]} =\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t}$$


$$
\begin{bmatrix}
    1 & 2 & 1\\
    2 & 3 & 1\\
    4 & 1 & 2\\
    1 & 5 & 2
\end{bmatrix} .\begin{bmatrix}
    a1\\
    a2\\
    a3
\end{bmatrix} =\begin{bmatrix}
    4\\
    6\\
    8\\
    7
\end{bmatrix}
$$

Encontrando 1/[R]:

$$
\begin{pmatrix}
\begin{bmatrix}
    1 & 2 & 4 & 1\\
    2 & 3 & 1 & 5\\
    1 & 1 & 2 & 2
\end{bmatrix} .\begin{bmatrix}
    1 & 2 & 1\\
    2 & 3 & 1\\
    4 & 1 & 2\\
    1 & 5 & 1
\end{bmatrix}
\end{pmatrix}^{-1} .\begin{bmatrix}
    1 & 2 & 4 & 1\\
    2 & 3 & 1 & 5\\
    1 & 1 & 2 & 2
\end{bmatrix}
$$


$$
\begin{pmatrix}
\begin{bmatrix}
    22 & 17 & 13\\
    17 & 39 & 17\\
    13 & 17 & 10
\end{bmatrix}
\end{pmatrix}^{-1} .\begin{bmatrix}
    1 & 2 & 4 & 1\\
    2 & 3 & 1 & 5\\
    1 & 1 & 2 & 2
\end{bmatrix}
$$


$$
\begin{bmatrix}
    0.3960 & 0.2000 & -0.8549\\
    0.2000 & 0.2000 & -0.6000\\
    -0.8549 & -0.6000 & 2.2313
\end{bmatrix} .\begin{bmatrix}
    1 & 2 & 4 & 1\\
    2 & 3 & 1 & 5\\
    1 & 1 & 2 & 2
\end{bmatrix}
$$


$$
\begin{bmatrix}
    -0.058 & 0.537 & 0.074 & -0.313\\
    0.000 & 0.400 & -0.200 & 0.000\\
    0.176 & -1.278 & 0.443 & 0.607
\end{bmatrix}
$$

Voltando para a equa√ß√£o


$$
\begin{bmatrix}
    a
\end{bmatrix} =
\frac{1}{[ R]} \ 
\begin{bmatrix}
    A
\end{bmatrix}
$$  

$$
[a] =\begin{bmatrix}
    -0.058 & 0.537 & 0.074 & -0.313\\
    0.000 & 0.400 & -0.200 & 0.000\\
    0.176 & -1.278 & 0.443 & 0.607
\end{bmatrix} .\begin{bmatrix}
    4\\
    6\\
    7\\
    8
\end{bmatrix}
$$

$$
[ a] =\begin{bmatrix}
    1\\
    1\\
    1\\
    1
\end{bmatrix}
$$

$$
f( x) =\sum ^{P}_{p=1} a_{p} .R_{p} +b
$$


$$
\begin{array}{ c c }
x & f( x)\\
2 & 3\\
3 & 6\\
4 & 5
\end{array}
$$

Utilizando dois polos:

$$
\begin{array}{l}
C1=2\\
C2=4
\end{array}
$$

$$
\sigma ^{2} =1
$$

$$
R_{p} = e^{-\frac{1}{2\sigma ^{2}} .\parallel ( X_{i}) -( X_{p}) \parallel ^{2}}
$$

$$
\begin{array}{l}
\begin{cases}
e^{-0.5\parallel ( 2) -( 2) \parallel ^{2}} a_{1} +e^{-0.5\parallel ( 2) -( 2) \parallel ^{2}} a_{2} +b=3\\
e^{-0.5\parallel ( 3) -( 2) \parallel ^{2}} a_{1} +e^{-0.5\parallel ( 3) -( 4) \parallel ^{2}} a_{2} +b=6\\
e^{-0.5\parallel ( 4) -( 2) \parallel ^{2}} a_{1} +e^{-0.5\parallel ( 4) -( 4) \parallel ^{2}} a_{2} +b=5
\end{cases}\\
\\
\begin{cases}
e^{-0.0} a_{1} +e^{-2.0} a_{2} +b=3\\
e^{-0.5} a_{1} +e^{-0.5} a_{2} +b=6\\
e^{-2.0} a_{1} +e^{-0.0} a_{2} +b=5
\end{cases}\\
_{\ }\\
\begin{cases}
1.0000a_{1} +0.1353 a_{2} +b1.0000=3\\
0.6065a_{1} +0.6065 a_{2} +b1.0000=3\\
0.1353a_{1} +1.0000 a_{2} +b1.0000=3
\end{cases}
\end{array}
$$
$$
 \begin{array}{l}
\begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.6065 & 0.6065 & 1.0000\\
0.1353 & 1.0000 & 1.0000
\end{bmatrix} .\begin{bmatrix}
a1\\
a2\\
a3
\end{bmatrix} =\begin{bmatrix}
3\\
6\\
5
\end{bmatrix}\\
\\
\begin{bmatrix}
R
\end{bmatrix}_{3x3} .\begin{bmatrix}
a
\end{bmatrix}_{3x1} =\begin{bmatrix}
A
\end{bmatrix}_{3x1}\\
\\
\begin{bmatrix}
R
\end{bmatrix} =\begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.6065 & 0.6065 & 1.0000\\
0.1353 & 1.0000 & 1.0000
\end{bmatrix}_{3x3}\\
\\
\frac{1}{[ R]} =\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t}\\
\\
[ R]^{t} .[ R] =\begin{bmatrix}
1.0000 & 0.6065 & 0.1353\\
0.1353 & 0.6065 & 1.0000\\
1.0000 & 1.0000 & 1.0000
\end{bmatrix}_{3x3} .\ \begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.6065 & 0.6065 & 1.0000\\
0.1353 & 1.0000 & 1.0000
\end{bmatrix}_{3x3}\\
\\
[ R]^{t} .[ R] =\begin{bmatrix}
1.3862 & 0.6386 & 1.7419\\
0.6386 & 1.3262 & 1.7419\\
1.7419 & 1.7419 & 3.0000
\end{bmatrix}_{3x3}\\
\\
\left([ R]^{t} .[ R]\right)^{-1} =\begin{bmatrix}
248.9582 & 247.6207 & -288.3246\\
247.6207 & 248.9582 & -288.3246\\
-288.3246 & -288.3246 & 335.1485
\end{bmatrix}_{3x3}\\
\\
\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t} \ =\begin{bmatrix}
248.9582 & 247.6207 & -288.3246\\
247.6207 & 248.9582 & -288.3246\\
-288.3246 & -288.3246 & 335.1485
\end{bmatrix}_{3x3} .\ \begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.6065 & 0.6065 & 1.0000\\
0.1353 & 1.0000 & 1.0000
\end{bmatrix}_{3x3}\\
\\
\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t} \ =\begin{bmatrix}
-5.8546 & 12.8657 & -7.0111\\
-7.0111 & 12.8657 & -5.8546\\
7.8034 & -146069 & 7.8034
\end{bmatrix}_{3x3} =\frac{1}{[ R]}\\
\\
\begin{bmatrix}
a
\end{bmatrix} =\frac{1}{[ R]} \ \begin{bmatrix}
A
\end{bmatrix}\\
\\
\begin{bmatrix}
+24.5749\\
+26.8879\\
-25.2138
\end{bmatrix}_{3x1} =\begin{bmatrix}
-5.8546 & 12.8657 & -7.0111\\
-7.0111 & 12.8657 & -5.8546\\
7.8034 & -146069 & 7.8034
\end{bmatrix}_{3x3} .\begin{bmatrix}
3\\
6\\
5
\end{bmatrix}_{3x1}\\
\\
f( x) =\sum ^{2}_{p=1} a_{p} .R_{p} +b\\
\\
f\ ( x) \ =a_{1} e^{-0.5\parallel ( X) -( 2) \parallel ^{2}} +a_{2} e^{-0.5\parallel ( X) -( 4) \parallel ^{2}} +b\\
\\
f\ ( x) \ =24.5749e^{-0.5\parallel ( X) -( 2) \parallel ^{2}} +26.8879e^{-0.5\parallel ( X) -( 4) \parallel ^{2}} -25.2138\\
\\
X=( 2) \Longrightarrow 24.5749e^{0.0} +26.8879e^{-2.0} -25.2138\ =3\\
\\
X=( 3) \Longrightarrow 24.5749e^{-0.5} +26.8879e^{-0.5} -25.2138\ =6\\
\\
X=( 4) \Longrightarrow 24.5749e^{-2.0} +26.8879e^{0.0} -25.2138\ =5\\
\\
f( 1.5) =-2.3451\\
\\
f( 2.5) =+5.2027\\
\\
f( 3.5) =+6.4930\\
\\
f( 4.5) =-0.4055\\
\end{array}
$$


## XOR input

$$
\begin{array}{l}
\begin{matrix}
x & f( x)\\
1,1 & 0\\
0,1 & 1\\
0,0 & 0\\
1,0 & 1
\end{matrix}\\
\\
\\  
 \begin{array}{l}
Polos\\
C1=( 1,1)\\
C2\ =( 0,0)
\end{array}\\
\\
\begin{cases}
e^{-1\parallel ( 1,1) -( 1,1) \parallel ^{2}} a_{1} +e^{-1\parallel ( 1,1) -( 0,0) \parallel ^{2}} a_{2} +b=0\\
e^{-1\parallel ( 0,1) -( 1,1) \parallel ^{2}} a_{1} +e^{-1\parallel ( 0,1) -( 0,0) \parallel ^{2}} a_{2} +b=1\\
e^{-1\parallel ( 0,0) -( 1,1) \parallel ^{2}} a_{1} +e^{-1\parallel ( 0,0) -( 0,0) \parallel ^{2}} a_{2} +b=0\\
e^{-1\parallel ( 1,0) -( 1,1) \parallel ^{2}} a_{1} +e^{-1\parallel ( 1,0) -( 0,0) \parallel ^{2}} a_{2} +b=1
\end{cases}\\
\\
\begin{cases}
e^{-0} a_{1} +e^{-2} a_{2} +b=0\\
e^{-1} a_{1} +e^{-1} a_{2} +b=1\\
e^{-2} a_{1} +e^{-0} a_{2} +b=0\\
e^{-1} a_{1} +e^{-1} a_{2} +b=1
\end{cases}\\
\\
\begin{cases}
1.0000a_{1} +0.1353 a_{2} +b1.0000=0\\
0.3678a_{1} +0.3678 a_{2} +b1.0000=1\\
0.1353a_{1} +1.0000 a_{2} +b1.0000=0\\
0.3678a_{1} +0.3678 a_{2} +b1.0000=1
\end{cases}\\
\\
\begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.3678 & 0.3678 & 1.0000\\
0.1353 & 1.0000 & 1.0000\\
0.3678 & 0.3678 & 1.0000
\end{bmatrix} .\begin{bmatrix}
a1\\
a2\\
b
\end{bmatrix} =\begin{bmatrix}
0\\
1\\
0\\
1
\end{bmatrix}\\
\\
\begin{bmatrix}
R
\end{bmatrix}_{4x3} .\begin{bmatrix}
a
\end{bmatrix}_{3x1} =\begin{bmatrix}
A
\end{bmatrix}_{4x1}\\
\\
\begin{bmatrix}
R
\end{bmatrix} =\begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.3678 & 0.3678 & 1.0000\\
0.1353 & 1.0000 & 1.0000\\
0.3678 & 0.3678 & 1.0000
\end{bmatrix}_{4x3}\\
\\
\frac{1}{[ R]} =\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t}\\
\\
[ R]^{t} .[ R] =\begin{bmatrix}
1.0000 & 0.3678 & 0.1353 & 0.3678\\
0.1353 & 0.3678 & 1.0000 & 0.3678\\
1.0000 & 1.0000 & 1.0000 & 1.0000
\end{bmatrix}_{3x4} .\begin{bmatrix}
1.0000 & 0.1353 & 1.0000\\
0.3678 & 0.3678 & 1.0000\\
0.1353 & 1.0000 & 1.0000\\
0.3678 & 0.3678 & 1.0000
\end{bmatrix}_{4x3}\\
\\
[ R]^{t} .[ R] =\begin{bmatrix}
1.2889 & 0.5413 & 1.8711\\
0.5413 & 1.2890 & 1.8711\\
1.8711 & 1.8711 & 4.0000
\end{bmatrix}_{3x3}\\
\\
\left([ R]^{t} .[ R]\right)^{-1} =\begin{bmatrix}
6.9320 & 5.5945 & -5.8596\\
5.5945 & 6.9320 & -5.8596\\
-5.8596 & -5.8596 & 5.7319
\end{bmatrix}_{3x3}\\
\\
\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t} =\begin{bmatrix}
6.9320 & 5.5945 & -5.8596\\
5.5945 & 6.9320 & -5.8596\\
-5.8596 & -5.8596 & 5.7319
\end{bmatrix}_{3x3} .\begin{bmatrix}
1.0000 & 0.3678 & 0.1353 & 0.3678\\
0.1353 & 0.3678 & 1.0000 & 0.3678\\
1.0000 & 1.0000 & 1.0000 & 1.0000
\end{bmatrix}_{3x4}\\
\\
\left([ R]^{t} .[ R]\right)^{-1} .[ R]^{t} =\begin{bmatrix}
1.8296 & -1.2513 & 0.6731 & -1.2513\\
0.6731 & -1.2513 & 1.8295 & -1.2513\\
-0.9207 & 1.4207 & -0.9207 & 1.4207
\end{bmatrix}_{3x4} =\frac{1}{[ R]}\\
\\
\begin{bmatrix}
a
\end{bmatrix} =\frac{1}{[ R]} \ \begin{bmatrix}
A
\end{bmatrix}\\
\\
\begin{bmatrix}
-2.5027\\
-2.5027\\
2.8413
\end{bmatrix}_{3x1} .\begin{bmatrix}
1.8296 & -1.2513 & 0.6731 & -1.2513\\
0.6731 & -1.2513 & 1.8295 & -1.2513\\
-0.9207 & 1.4207 & -0.9207 & 1.4207
\end{bmatrix}_{3x4} =\begin{bmatrix}
0\\
1\\
0\\
1
\end{bmatrix}_{4x1}\\
\\
f( x) =\sum ^{2}_{p=1} a_{p} .R_{p} +b\\
\\
f\ ( x) \ =a_{1} e^{-1\parallel ( X) -( 1,1) \parallel ^{2}} +a_{2} e^{-1\parallel ( X) -( 0,0) \parallel ^{2}} +b\\
\\
f\ ( x) \ =-2.5027e^{-1\parallel ( X) -( 1,1) \parallel ^{2}} -2.5027e^{-1\parallel ( X) -( 0,0) \parallel ^{2}} +2.8413\\
\\
X=( 1,1) \Longrightarrow -2.5027e^{0} -2.5027e^{-2} +2.8413=0\\
\\
X=( 0,1) \Longrightarrow -2.5027e^{-1} -2.5027e^{-1} +2.8413=1\\
\\
X=( 0,0) \Longrightarrow -2.5027e^{-2} -2.5027e^{0} +2.8413=0\\
\\
X=( 1,0) \Longrightarrow -2.5027e^{-1} -2.5027e^{-1} +2.8413=1
\end{array}
$$



$$
    e^{-\frac{1}{2\sigma ^{2}} \ ( x-0)^{2}}
$$
 -->

## Implementa√ß√£o

``` python
import numpy as np
from math import exp, pow
from numpy.linalg import inv
from functools import reduce
import matplotlib.pyplot as plt

def rbf(inp, out, center):
    def euclidean_norm(x1, x2):
        return sqrt(((x1 - x2)**2).sum(axis=0))

    def gaussian (x, c):
        return exp(-0.5 * pow(euclidean_norm(x, c), 2))

    R = np.ones((len(inp), (len(center) + 1)))

    for i, iv in enumerate(inp):
        for j, jv in enumerate(center):
            R[i, j] = (gaussian(inp[i], center[j]))

    Rt = R.transpose()
    RtR = Rt.dot(R)
    iRtR = inv(RtR)
    oneR = iRtR.dot(Rt)
    a = oneR.dot(out)

    def rbf_interpolation(x):
        sum = np.ones(len(center) + 1)

        for i, iv in enumerate(center):
            sum[i] = gaussian(x, iv)

        y = a * sum
        return reduce((lambda x, y: x + y), y)

    return rbf_interpolation
```

``` python
inp = np.array([2, 3, 4])
out = np.array([3, 6, 5])
center = np.array([2, 4])

rbf_instance = rbf(inp, out, center)

input_test = input_test = np.linspace(0,10,100)
output_test = list(map(rbf_instance, input_test))

plt.plot(input_test, output_test)
plt.plot(inp, out, 'ro')
plt.ylabel('expected vs predicted')
plt.show()
```

![{{ site.baseurl }}/assets/img/rbf1.svg]({{ site.baseurl }}/assets/img/rbf1.svg)

``` python
inp = np.array([2, 3, 4, 5])
out = np.array([3, 1, 5, -2])
center = np.array([2, 3, 4])

rbf_instance = rbf(inp, out, center)

input_test = np.linspace(-5,10,100)
output_test = list(map(rbf_instance, input_test))

plt.plot(input_test, output_test)
plt.plot(inp, out, 'ro')
plt.ylabel('expected vs predicted')
plt.show()
```

![{{ site.baseurl }}/assets/img/rbf1.svg]({{ site.baseurl }}/assets/img/rbf2.svg)

``` python
inp = np.array([2, 4, 7, 9])
out = np.array([7, 8, 9, 5])
center = np.array([2, 3, 4])

rbf_instance = rbf(inp, out, center)

input_test = input_test = np.linspace(-5,15,100)
output_test = list(map(rbf_instance, input_test))

plt.plot(input_test, output_test)
plt.plot(inp, out, 'ro')
plt.ylabel('expected vs predicted')
plt.show()
```

![{{ site.baseurl }}/assets/img/rbf1.svg]({{ site.baseurl }}/assets/img/rbf3.svg)


### XOR input

``` python
inp = np.array([np.array([1,1]), np.array([0,1]), np.array([0,0]), np.array([1,0])])
out = np.array([              0,               1,               0,             1])
center = np.array([ np.array([1,1]), np.array([0,0])])

rbf_instance = rbf(inp, out, center)


inp_test = np.array([np.array([1,1]), 
                     np.array([0,1]), 
                     np.array([0,0]), 
                     np.array([1,0])])
output = map(rbf_instance, inp_test)

def colorize(output):
    c = [None]* len(output)
    for i, iv in enumerate(output):
        if (output[i] > 0):
            c[i] = 'blue'
        else:
            c[i] = 'red'
    return c

inp_x = [1, 0, 0, 1]
inp_y = [1, 1, 0, 0]

c = colorize(output)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.scatter(inp_x, inp_y, output, color=c, depthshade=False)
plt.show()
```

![{{ site.baseurl }}/assets/img/rbf1.svg]({{ site.baseurl }}/assets/img/rbf_xor.svg)
