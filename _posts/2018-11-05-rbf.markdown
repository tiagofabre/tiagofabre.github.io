---
layout: post
title:  "Radial Basis Function Exemplo"
date:	2018-11-05 21:34:00 -0300
subtitle: "Entendendo uma Radial Basis Function"
comments: true
categories: Machine-learning data-science
---

<div id="myDiv" class="jxgbox">
</div>

<script>

var layout = {
        title:'Line and Scatter Plot'
    }

    const expr1 = math.compile(`e^(-(1/${2})*(x-${3})^2) + e^(-(1/${2})*(x+${3})^2)`)
        const xValues = math.range(-15, 15, 0.05).toArray()
        const yValues1 = xValues.map(function (x) {
            return expr1.eval({x: x})
        })

        const trace1 = {
            x: xValues,
            y: yValues1,
            type: 'scatter'
        }

        var data = [trace1];

        Plotly.newPlot('myDiv', 
                   data, 
                   layout,
                   {displayModeBar: false});
    
    

    function showVal(value) {
        console.log(value)
        const expr1 = math.compile(`e^(-(1/${value*0.5})*(x-${4})^2) + e^(-(1/${value*0.5})*(x+${4})^2)`)
        const xValues = math.range(-15, 15, 0.05).toArray()
        const yValues1 = xValues.map(function (x) {
            return expr1.eval({x: x})
        })

        const trace1 = {
            x: xValues,
            y: yValues1,
            type: 'scatter'
        }

        var data = [trace1];

        Plotly.newPlot('myDiv', 
                   data, 
                   layout,
                   {displayModeBar: false});
    }
</script>

  <input type="range" min="1" max="50" value="0" style="width:100%;" class="slider" id="myRange"  oninput="showVal(this.value)">



## Exemplo prÃ¡tico

``` python
import numpy as np
from math import exp, pow
from numpy.linalg import inv
from functools import reduce
import matplotlib.pyplot as plt

def rbf(inp, out, center):
    def euclidean_norm(x1, x2):
        return sqrt(((x1 - x2)**2).sum(axis=0))

    def gaussian (x, c):
        return exp(-0.5 * pow(euclidean_norm(x, c), 2))

    R = np.ones((len(inp), (len(center) + 1)))

    for i, iv in enumerate(inp):
        for j, jv in enumerate(center):
            R[i, j] = (gaussian(inp[i], center[j]))

    Rt = R.transpose()
    RtR = Rt.dot(R)
    iRtR = inv(RtR)
    oneR = iRtR.dot(Rt)
    a = oneR.dot(out)

    def rbf_interpolation(x):
        sum = np.ones(len(center) + 1)

        for i, iv in enumerate(center):
            sum[i] = gaussian(x, iv)

        y = a * sum
        return reduce((lambda x, y: x + y), y)

    return rbf_interpolation
```

``` python
inp = np.array([2, 3, 4])
out = np.array([3, 6, 5])
center = np.array([2, 4])

rbf_instance = rbf(inp, out, center)

input_test = input_test = np.linspace(0,10,100)
output_test = list(map(rbf_instance, input_test))

plt.plot(input_test, output_test)
plt.plot(inp, out, 'ro')
plt.ylabel('expected vs predicted')
plt.show()
```

![{{ site.baseurl }}/assets/img/rbf1.svg]({{ site.baseurl }}/assets/img/rbf1.svg)

``` python
inp = np.array([2, 3, 4, 5])
out = np.array([3, 1, 5, -2])
center = np.array([2, 3, 4])

rbf_instance = rbf(inp, out, center)

input_test = np.linspace(-5,10,100)
output_test = list(map(rbf_instance, input_test))

plt.plot(input_test, output_test)
plt.plot(inp, out, 'ro')
plt.ylabel('expected vs predicted')
plt.show()
```

![{{ site.baseurl }}/assets/img/rbf1.svg]({{ site.baseurl }}/assets/img/rbf2.svg)

``` python
inp = np.array([2, 4, 7, 9])
out = np.array([7, 8, 9, 5])
center = np.array([2, 3, 4])

rbf_instance = rbf(inp, out, center)

input_test = input_test = np.linspace(-5,15,100)
output_test = list(map(rbf_instance, input_test))

plt.plot(input_test, output_test)
plt.plot(inp, out, 'ro')
plt.ylabel('expected vs predicted')
plt.show()
```

![{{ site.baseurl }}/assets/img/rbf1.svg]({{ site.baseurl }}/assets/img/rbf3.svg)


### XOR input

``` python
inp = np.array([np.array([1,1]), np.array([0,1]), np.array([0,0]), np.array([1,0])])
out = np.array([              0,               1,               0,             1])
center = np.array([ np.array([1,1]), np.array([0,0])])

rbf_instance = rbf(inp, out, center)


inp_test = np.array([np.array([1,1]), 
                     np.array([0,1]), 
                     np.array([0,0]), 
                     np.array([1,0])])
output = map(rbf_instance, inp_test)

def colorize(output):
    c = [None]* len(output)
    for i, iv in enumerate(output):
        if (output[i] > 0):
            c[i] = 'blue'
        else:
            c[i] = 'red'
    return c

inp_x = [1, 0, 0, 1]
inp_y = [1, 1, 0, 0]

c = colorize(output)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.scatter(inp_x, inp_y, output, color=c, depthshade=False)
plt.show()
```

![{{ site.baseurl }}/assets/img/rbf1.svg]({{ site.baseurl }}/assets/img/rbf_xor.svg)
